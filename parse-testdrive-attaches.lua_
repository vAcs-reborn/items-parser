local sampev = require('lib.samp.events');
local ArizonaEvents = require('arizona-events');
PACKET_PATTERN = 'window%.executeEvent%(\'event%.(.+)\', `(.+)`%);'
ID = select(2, sampGetPlayerIdByCharHandle(PLAYER_PED));
OUTPUT_FILE = getWorkingDirectory() .. '\\vAcs items parser\\vacs-parsed-items-' .. os.date('%H-%M-%S_%d_%m_%Y') .. '.json';
STATE = {
    NONE = 'NONE',
    WAITING_FOR_DIALOG = 'WAITING_FOR_DIALOG',
    WAITING_FOR_MENU = 'WAITING_FOR_MENU',
    WAITING_FOR_ATTACH = 'WAITING_FOR_ATTACH',
    WAITING_FOR_CLICK = 'WAITING_FOR_CLICK',
};


---@type {id: number, title: string, img: number, color: number, currency: string, price: number}
local items = {};
local itemIndex = 0;
local state = STATE.NONE;
local parsed = {};
local active = false;

local function msg(...)
    sampAddChatMessage('vAcs Parser // ' .. table.concat({...}, ' '), -1);
    print(...);
end

local function sendClickItem(index)
    local str = 'mountain.testDrive.selectVehicle|' .. index
    local bs = raknetNewBitStream()
    raknetBitStreamWriteInt8(bs, 220)
    raknetBitStreamWriteInt8(bs, 18)
    raknetBitStreamWriteInt16(bs, #str)
    raknetBitStreamWriteString(bs, str)
    raknetBitStreamWriteInt32(bs, 0)
    raknetSendBitStream(bs)
    raknetDeleteBitStream(bs)
end

local function save()
    local file = io.open(OUTPUT_FILE, 'w');
    assert(file);
    file:write(encodeJson(parsed));
    file:close();
    msg('Done:', OUTPUT_FILE);
end

local function setState(newState)
    local oldState = state;
    state = newState;
    msg('State changed from', oldState, 'to', newState);
end

local function attachHandler(playerId, data, isArizona, model)
    if (playerId == ID) then
        if (state == STATE.WAITING_FOR_ATTACH) then
            if (items[itemIndex]) then
                msg('Item parsed:', items[itemIndex].title, ('%d/%d'):format(itemIndex, #items));
                local newItem = {
                    name = items[itemIndex].title,
                    model = model or -1,
                    UID = (isArizona and 100000 or 0) + itemIndex,
                    bone = data.bone,
                    tags = isArizona and { 'arizona' } or {},
                    position = {data.offset.x, data.offset.y, data.offset.z },
                    rotation = {data.rotation.x, data.rotation.y, data.rotation.z },
                    scale = {data.scale.x, data.scale.y, data.scale.z },
                    colors = {0, 0},
                    arizona = {
                        img = items[itemIndex].img,
                        color = items[itemIndex].color
                    }
                };
                table.insert(parsed, newItem);
                print(encodeJson(newItem));
                setState(STATE.WAITING_FOR_CLICK);
            else
                msg('Error, no item in items list:', itemIndex);
                setState(STATE.WAITING_FOR_CLICK);
            end
        else
            msg('Attach, but state == ', state);
        end
    end
end

function sampev.onSetPlayerAttachedObject(playerId, index, create, object)
    attachHandler(playerId, object, false, object.modelId);
end

function ArizonaEvents.onArizonaSetPlayerAttachedObject(data)
    attachHandler(data.player_id, data.object, true, data.object.model_id);
end

addEventHandler('onReceivePacket', function(id, bs)
    if id == 220 then
        raknetBitStreamIgnoreBits(bs, 8)
        if (raknetBitStreamReadInt8(bs) == 17) then
            raknetBitStreamIgnoreBits(bs, 32)
            local length = raknetBitStreamReadInt16(bs)
            local encoded = raknetBitStreamReadInt8(bs)
            local str = (encoded ~= 0) and raknetBitStreamDecodeString(bs, length + encoded) or
            raknetBitStreamReadString(bs, length)
            print(str);
            local event, json = str:match(PACKET_PATTERN);
            local data = decodeJson(json);

            -- Update items list
            if (event == 'mountain.testDrive.addVehicles') then
                msg('List received!', #data[1], 'first id:', data[1][1].id, ', last id:', data[1][#data[1]].id);
                for _, v in pairs(data[1]) do
                    items[v.id] = v;
                end
                if (#items > 0 and state == STATE.NONE) then
                    itemIndex = -1;
                    active = true;
                    setState(STATE.WAITING_FOR_CLICK);
                end
            end
            
            if (state == STATE.NONE) then
                if (str:find(PACKET_PATTERN)) then
                    if (state == STATE.WAITING_FOR_MENU and event == 'mountain.testDrive.initializeText' and data[1].title:find('Примерка аксессуаров %(уникальных%)')) then
                        msg('Items menu found!')
                        items = {};
                    end
                end
            end
        end
    end
end);

addEventHandler('onSendPacket', function(id, bs, priority, reliability, orderingChannel)
    if id == 220 then
        local id = raknetBitStreamReadInt8(bs)
        local packettype = raknetBitStreamReadInt8(bs)
        local strlen = raknetBitStreamReadInt16(bs)
        local str = raknetBitStreamReadString(bs, strlen)
        if packettype ~= 0 and packettype ~= 1 and #str > 2 then
            print('SENT CEF', str) -- исходящая строка
        end
    end
end);

addEventHandler('onScriptTerminate', function(scr)
    if (scr == thisScript() and #parsed > 0) then
        save();
    end
end);

function main()
    while not isSampAvailable() do wait(0) end
    sampRegisterChatCommand('vacs.parser.save', save);
    lua_thread.create(function()
        while true do
            wait(0)
            if (active) then
                printStringNow(('state = %s, index: %d/%d)'):format(STATE[state], itemIndex, #items), 200);
            end
        end
    end);
    while true do
        wait(250)
        if (active) then
            if (state == STATE.WAITING_FOR_CLICK) then
                itemIndex = itemIndex + 1;
                setState(STATE.WAITING_FOR_ATTACH);
                wait(20);
                sendClickItem(itemIndex);
                msg('click sent to', itemIndex);
            
                if (not items[itemIndex]) then
                    active = false;
                    msg('Done! Parsed:', #parsed);
                end
            end
        end
    end
end